OLD SKILLS BOX determineModSign

<div className="LoneSkillsBox">
                <span 
                                className= {
                                    profInAcrobatics ? 
                                        'ProficiencyCheckBoxActive' : 
                                        'ProficiencyCheckBox'}
                // className= {
                //     proficientSkillsArray[0].proficient ? 
                //         'ProficiencyCheckBoxActive' : 
                //         'ProficiencyCheckBox'}
                id="Acrobatics"
                onClick={() => {
                    if(skillsIsEdit) {
                        setProfInAcrobatics(!profInAcrobatics);
                    }
                    // if(skillsIsEdit) {
                    //     (proficientSkillsArray[0].proficient = !proficientSkillsArray[0].proficient );
                    //     console.log("acro prof", proficientSkillsArray[0].proficient);
                    // }
                    }}></span>
                <span className="SkillModifierValue"> 
                    { profInAcrobatics ? 
                        (((parseInt(determineModifier(Acrobatics)) + proficiencyBonus)) >= 0) ?
                           `+${((parseInt(determineModifier(Acrobatics)) + proficiencyBonus))}` 
                           : ((parseInt(determineModifier(Acrobatics)) + proficiencyBonus)) 
                        : determineModifier(Acrobatics)}

                    {/* { proficientSkillsArray[0].proficient ? 
                        (((parseInt(determineModifier(Acrobatics)) + proficiencyBonus)) >= 0) ?
                           `+${((parseInt(determineModifier(Acrobatics)) + proficiencyBonus))}` 
                           : ((parseInt(determineModifier(Acrobatics)) + proficiencyBonus)) 
                        : determineModifier(Acrobatics)}  */}
                </span>
                <span className="SkillsNameText"> Acrobatics </span>
                <span className="SkillsNameAbilityMod"> (DEX) </span>
            </div>


OLD ATTACK STUFF


    const Sarry = (skill) => {
        return (
        <div className="loneAttackBox">
            <div className="attackInfoUpperBox">
                <div className="attackInfoNameBox">
                    <span>Name</span>
                    <input className="attackNameInput" type={'text'}></input>
                </div>
                {proficientWithWeaponAnswer ? <FinalAttackBonusBox /> :
                (<div className="attackBonusOuterBox">
                    <span className="attackBonusText">Attack Bonus</span>
                    <div className="attackBonusChoicesBox">
                    {proficientWithWeaponAnswer ? <FinalAttackBonusBox /> :
                        (rangedOrMeleeAnswer ?
                        (finesseWeaponAnswer ? <ProficientWithWeaponBoxQuestion /> :
                            <FinesseWeaponBoxQuestion />) :
                                <RangedOrMeleeBoxQuestion />)}
                    </div>
                </div>)}
            </div>
            <div className="attackNotesLowerBox">
                <span className="attackNotesText">Notes</span>
                <textarea className="attackNotesInputBox"></textarea>
            </div>
        </div>
    )};


        // function renderArray() {
        //     return skillsArray.map((skill, index) => {
        //         <Sarry skill={skill}/>
        //     })
        // }



        // const sarry = skillsArray.forEach((skill, index) => {
        //     console.log(skill);
        //     <div className="LoneSkillsBox">
        //             <span
        //                 className="ProficiencyCheckBox"
        //                 onClick={() => determineSkillCheckBonus(skill.SkillName, skill.SkillAbility)}></span>
        //             <span className="SkillModifierValue"> {skill.SkillsMod} </span>
        //             <span className="SkillsNameText"> {skill.SkillName} </span>
        //             <span className="SkillsNameAbilityMod"> ({skill.SkillAbility}) </span>
        //     </div>
        // })

        // return (
        //     <div className="SkillsBox">
        //         <span className="SkillsText"> Skills </span>
        //         <>
        //         {renderArray()}
        //         </>
        //     </div>
        // )

    function fillProficientSkillCircle() {

    }

    // function AttacksSelectionBoxF() {
    //     console.log('attack');
    //     const test = document.createElement('div');
    //     document.getElementById('multiTest')?.appendChild(<AttacksSelectionBox />);
    //     return (
    //         <div className="Notes-MultiSelectBox">
    //             ATTACKSaaaaaaaaaaaa
    //         </div>
    //     )
    // }

    // function SpellsSelectionBoxF() {
    //     console.log('spell')
    //     return (
    //         <div className="Notes-MultiSelectBox">
    //             SPELLS
    //         </div>
    //     )
    // }


    const RangedOrMeleeBoxQuestion = () => {
        return (
            <div className="MeleeOrRangedBox">
                <div
                    className="MeleeBox"
                    id="Melee"
                    onClick={() => {
                        setAttackBonus(DEXModifier);
                        setRangedOrMeleeAnswer(true);
                    }}>
                    <span className="MeleeText">Melee</span>
                </div>
                <span>or</span>
                <div
                    className="RangeBox"
                    id="Melee"
                    onClick={() => {
                        setAttackBonus(STRModifier);
                        setRangedOrMeleeAnswer(true);
                    }}>
                    <span className="RangedText">Ranged</span>
                </div>
            </div>
        )
    };

    const FinesseWeaponBoxQuestion = () => {
        return (
            <div className="FinesseWeaponBox">
                <span>Finesse?</span>
                <div
                    className="YesBox"
                    id="YesFinesse"
                    onClick={() => {
                        ((STRModifier >= DEXModifier)
                            ? setAttackBonus(STRModifier) :
                            setAttackBonus(DEXModifier))
                        setFinesseWeaponAnswer(true);
                    }}>
                    <span className="MeleeText">Yes</span>
                </div>
                <div
                    className="NoBox"
                    id="NoFinesse"
                    onClick={() => {
                        setFinesseWeaponAnswer(true);
                    }}>
                    <span className="RangedText">No</span>
                </div>
            </div>
        )
    };

    const ProficientWithWeaponBoxQuestion = () => {
        return (
            <div className="proficientWeaponQuestionBox">
                <span>Proficient?</span>
                <div
                    className="YesBox"
                    id="Proficient"
                    onClick={() => {
                        setAttackBonus(attackBonus + proficiencyBonus);
                        setProficientWithWeaponAnswer(true);
                        setFinesseWeaponAnswer(false);
                        setRangedOrMeleeAnswer(false);
                    }}>
                    <span className="MeleeText">Yes</span>
                </div>
                <div
                    className="NoBox"
                    id="NotProficient"
                    onClick={() => {
                        setProficientWithWeaponAnswer(true);
                        setFinesseWeaponAnswer(false);
                        setRangedOrMeleeAnswer(false);
                    }}>
                    <span className="RangedText">No</span>
                </div>
            </div>
        )
    };

    const FinalAttackBonusBox = () => {
        return (
            <div className="finalAttackBonusOuterBox">
                <span className="attackBonusText">ATK Bonus</span>
                <div className="finalAttackInnerBox">
                    {/*@ts-ignore*/}
                    <span className="finalAttackBonusText">{`+${attackCardArray[attackCardArray.length-1].atkBonus}`} </span> 
                </div>
            </div>
        )
    };

    function resetAttackBonusQuestions() {
        setProficientWithWeaponAnswer(false);
        setFinesseWeaponAnswer(false);
        setRangedOrMeleeAnswer(false);
    };

    function newAttackBoxString(index) {

        return (
            `<div className="newLoneAttackBox">
                <div className="attackInfoUpperBox">
                    <div className="attackInfoNameBox">
                        <span>Name</span>
                        <input className="attackNameInput" id="AttackName" type={'text'}></input>
                    </div>
                    <div className="finalAttackBonusOuterBox">
                        <span className="attackBonusText">ATK Bonus</span>
                        <div className="finalAttackInnerBox">
                            <span className="finalAttackBonusText"> +${attackCardArray[attackCardArray.length-1].atkBonus} </span> 
                        </div>
                    </div>
                </div>
                <div className="attackNotesLowerBox">
                    <span className="attackNotesText">Notes</span>
                    <textarea className="attackNotesInputBox"></textarea>
                </div>
            </div>
        `)
    };

    function createNewAttackBox(index: number) {
        console.log('new attack click');
        const newAttackBox = document.createElement('div');
        newAttackBox.innerHTML = newAttackBoxString(index);
        newAttackBox.className = 'newLoneAttackBox';
        document.getElementById('attackTest')!.appendChild(newAttackBox);
    }

    function handleNewAttackBox() {
        // const attackName = document.getElementById('AttackName')!.value;
        // console.log(attackName);
        // // if(numberOfAttacks === 0) {
        // //     const temp = new AttackCard(attackName, 5, 4, 2, 'Piercing', 20, 60, 'Finesse, Thrown' );
        // //     attackCardArray[numberOfAttacks] = temp;
        // // } else {

        // // }
        // const temp = new AttackCard(attackName, 5, 4, 2, 'Piercing', 20, 60, 'Finesse, Thrown' );
        // attackCardArray.push(temp);
        // console.log('temp', temp);
        console.log('attacks', numberOfAttacks);
        console.log('arrayTemp', attackCardArray[numberOfAttacks]);
        //setNumberOfAttacks(numberOfAttacks + 1);
        //createNewAttackBox(0);
        if(proficientWithWeaponAnswer === false) {
            alert('Not Finished Creating Attack');
        } else {
            createNewAttackBox(0);
        }
    }